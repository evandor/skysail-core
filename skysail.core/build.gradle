//tasks.assemble.dependsOn(':skysail.client:build')
//tasks.assemble.dependsOn(':skysail.server.auth.basic:build')

apply plugin: 'scala'
apply plugin: 'java'
apply plugin: 'org.scoverage'
apply plugin: 'com.moowork.node'

apply plugin: 'com.bmuschko.docker-remote-api'

repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
}

plugins {
    id "io.skysail.twirl.osgi" version "0.1.0"
}

buildscript {
  repositories {
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
    mavenLocal()
  }
  dependencies {
    classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    classpath "com.bmuschko:gradle-docker-plugin:3.0.11"
    //classpath "io.skysail.gradle:twirlosgi-gradle-plugin:0.1.0"
  }
}

dependencies {
    compile 'org.scala-lang:scala-library:2.11.8'
    compile 'org.scala-lang:scala-reflect:2.11.8'
    scoverage 'org.scoverage:scalac-scoverage-plugin_2.11:1.1.0', 'org.scoverage:scalac-scoverage-runtime_2.11:1.1.0'
    
}

task copyConf(type : Copy) {
    println "copying configuration"
    from "config"
    into "etc/release/config"
}

task copyRunnables(type : Copy) {
    println "copying executable"
    from "generated/distributions/executable"
    into "etc/release"
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

task buildImage(type: DockerBuildImage) {
    //dependsOn createDockerfile
    inputDir = project.file('etc/release')//createDockerfile.destFile.parentFile
    tag = 'evandor/skysail-server'
    //noCache = true
}

task runnable(dependsOn: ['copyConf', 'copyRunnables']) {
    println "copying configuration..."
}

apply plugin: 'io.skysail.twirl.osgi'

task greeting(type: io.skysail.gradle.plugin.twirlosgi.GreetingTask) {
    greeting = 'howdy!'
}


/*task myScript(type: NodeTask) {
  script = file('client/npm-build.js')
  execOverrides {
    it.ignoreExitValue = true
    it.workingDir = 'client/'
    it.standardOutput = new FileOutputStream('skysail.core/etc/npm-build.log')
  }
}

// https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
node {
  distBaseUrl = 'https://nodejs.org/dist'
  download = true
  nodeModulesDir = file("client")
}

// http://www.umeshmorsu.com/2017/04/28/spring-boot-and-angular-cli-example/
task buildClient(type:NpmTask, dependsOn:'npmInstall') {
  group = 'build'
  description = "Compile client side folder for production"
  args = ['run','buildProd']
}*/

sourceSets {
    main {
        scala {
            srcDirs = ['src']
        }
        java {
            srcDirs = []
        }
    }
    test {
        scala {
            srcDirs = ['test']
        }
        java {
            srcDirs = []
        }
    }
}

